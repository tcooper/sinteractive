#!/bin/bash
# -*- coding: utf-8 -*-
# Authors: PÃ¤r Andersson (National Supercomputer Centre, Sweden)
#          Paul Mezzanini (Rochester Institute of Technology, USA)
#          Josh McSavaney (Rochester Institute of Technology, USA)
#
# This will submit a batch script that starts screen on a node.
# Then ssh is used to connect to the node and attach the screen.
# The result is very similar to an interactive shell in PBS
# (qsub -I)

set -e

function TPUT()
{
    #check for TTY and tput and redefine our existence based upon the results
    if [[ -t 1 && -t 2 ]] && command -v "tput" >& /dev/null \
               && tput setaf 1 >& /dev/null ; then
        function TPUT()
        {
            tput "$@"
        }
    else
        function TPUT() { : ; }
    fi

    #now call thy self
    TPUT "$@"
}

function ERROR()
{
    TPUT setaf 1 >&2
    while read; do
        echo "ERROR: $REPLY"
    done <<< "$@" >&2
    TPUT sgr0 >&2
}

function WARN()
{
    TPUT setaf 3
    while read; do
        echo "WARN: $REPLY"
    done <<< "$@"
    TPUT sgr0
}

function INFO()
{
    TPUT setaf 2
    while read; do
        echo "INFO: $REPLY"
    done <<< "$@"
    TPUT sgr0
}

function READ_CONFIG()
{
    [[ -r "$MYDIR"/sinteractive.conf ]] && . "$MYDIR"/sinteractive.conf
    [[ -r ~/.sinteractive.conf ]] && . ~/.sinteractive.conf
    DEFCPU="${DEFCPU:=2}"
    DEFMEM="${DEFMEM:=4096}"
    DEFTIME="${DEFTIME:=120}"
    USE_QOS="${USE_QOS:=no}"
    if [[ "$USE_QOS" = "yes" ]]; then
        DEFQOS="${DEFQOS:=free}"
    fi
    DEFPART="${DEFPART:=work}"
    TIMEOUT="${TIMEOUT:=60}"
}

export MYDIR="$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )"

# Batch Script that starts SCREEN
BS="${MYDIR}/_interactive"
# Interactive screen script
IS="${MYDIR}/_interactive_screen"
READ_CONFIG

INFO ">Please enter your resource requirements.<"
echo " "
read -e -p "How many CPU cores? :: " -i "$DEFCPU" REQCPU
read -e -p "How much memory (in MB)? :: " -i "$DEFMEM" REQMEM
read -e -p "How many minutes do you need? :: " -i "$DEFTIME" REQTIME

if [[ $USE_QOS = "yes" ]]; then
    read -e -p "What QOS? :: " -i "$DEFQOS" QOS
fi

read -e -p "What partition? :: " -i "$DEFPART" PARTITION

echo " "

WARN "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
WARN "!! If you detach from the sinteractive  !!"
WARN "!! screen session, it _WILL_ be killed. !!"
WARN "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo " "
INFO "Spawning job with the following resources:"
INFO "     Processors: ${REQCPU}"
INFO "         Memory: ${REQMEM} MB"
INFO "  Runtime limit: ${REQTIME} minutes"

if [[ $USE_QOS = "yes" ]]; then
    INFO "            QOS: ${QOS}"
fi

INFO "      Partition: ${PARTITION}"

#declare SBATCH_ARGS as an array
declare -a SBATCH_ARGS

SBATCH_ARGS=( --cpus-per-task="${REQCPU}" --mem="${REQMEM}" \
    --time="${REQTIME}" --partition="${PARTITION}"\
    --output=/dev/null --error=/dev/null --export MYDIR )

if [[ $USE_QOS = "yes" ]]; then
    SBATCH_ARGS+=( --qos="${QOS}" )
fi

echo " "

INFO "Submitting job..."
if ! JOB="$( sbatch "${SBATCH_ARGS[@]}" "$@" "${BS}" \
    |& egrep -o -e "\b[0-9]+$" )"; then

    ERROR "Failed to create job. Please double-check all settings are valid."
    exit 1
fi

# Make sure the job is always canceled
# Relying on $PATH for scancel
trap "{ echo 'Exit triggered. Cancelling job.' >&2 ; \
    scancel --quiet "${JOB}"; exit ; }" EXIT

sleep 1

# See if everything exploded immediately
if scontrol show job "$JOB" 2>/dev/null | grep -q "JobState=FAILED"; then
    ERROR "Looks like sinteractive is broken. Contact an administrator."
    exit 1
fi

INFO "Waiting for JOBID ${JOB} to start"
while : ; do
    sleep 1s

    # Check job status
    STATUS="$( squeue -j "${JOB}" -t PD,R -h -o %t )"

    if [[ "${STATUS}" = "R" ]]; then
        # Job is running, break the while loop
        break
    fi

    if [[ "$TIMEOUT" -le 0 ]]; then
        # Let the trap sort 'em out
        echo
        INFO "Waiting for job start timed out."
        INFO "This is probably just a sign the cluster is real busy."
        INFO "Please try again later."
        exit 1
    fi

    ((TIMEOUT--))

    echo -n "."
done

# Determine the first node in the job:
NODE="$( srun --jobid="${JOB}" -N1 hostname )"

# SSH to the node and attach the screen

sleep 1s

# sacrific security for user experience
ssh -Y -o StrictHostKeyChecking=yes -c arcfour -C \
    -t "${NODE}" "${IS}" "slurm${JOB}"

INFO "Wrapping up..."

# The trap will now cancel the job before exiting.
